From: <postbox@lisdatacenter.org>
Subject: job 1159572 br
Date: December 18, 2023 at 9:15:41 AM CST
To: <fsolt@mac.com>

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, tb) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- exp(log(wNtile(df$dhi, df$hpopwgt, 0.75)) + 3 * (log(wNtile(df$dhi, df$hpopwgt, 0.75)) - log(wNtile(df$dhi, df$hpopwgt, 0.25)))) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hcexp, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "ci", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is", "in",  
+            "ie", "il", "it", "jp", "lt", "lu", "ml", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ps", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy", "vn") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("br") 
[1] "Loading dataset br06h..."
br06h,market_hh,0.6099,0.0017,120
br06h,market_sqrt,0.5941,0.0019,120
br06h,market_pc,0.6186,0.0016,120
br06h,market_oecdm,0.5973,0.0018,120
br06h,market_ae,0.6047,0.0017,120
br06h,gross_hh,0.5276,0.0018,120
br06h,gross_sqrt,0.5261,0.0017,120
br06h,gross_pc,0.555,0.0015,120
br06h,gross_oecdm,0.5281,0.0016,120
br06h,gross_ae,0.5372,0.0015,120
br06h,disp_hh,0.5059,0.0017,120
br06h,disp_sqrt,0.5047,0.0017,120
br06h,disp_pc,0.5351,0.0018,120
br06h,disp_oecdm,0.5065,0.0018,120
br06h,disp_ae,0.5161,0.0015,120
br06h,con_hh,NaN,NA,120
br06h,con_sqrt,NaN,NA,120
br06h,con_pc,NaN,NA,120
br06h,con_oecdm,NaN,NA,120
br06h,con_ae,NaN,NA,120
[1] "Loading dataset br09h..."
br09h,market_hh,0.5936,0.0015,120
br09h,market_sqrt,0.5717,0.0017,120
br09h,market_pc,0.5962,0.0016,120
br09h,market_oecdm,0.5749,0.0015,120
br09h,market_ae,0.5822,0.0017,120
br09h,gross_hh,0.5064,0.0014,120
br09h,gross_sqrt,0.5004,0.0015,120
br09h,gross_pc,0.5298,0.0015,120
br09h,gross_oecdm,0.5022,0.0014,120
br09h,gross_ae,0.5114,0.0016,120
br09h,disp_hh,0.4831,0.0015,120
br09h,disp_sqrt,0.4777,0.0015,120
br09h,disp_pc,0.5085,0.0014,120
br09h,disp_oecdm,0.4792,0.0015,120
br09h,disp_ae,0.489,0.0017,120
br09h,con_hh,NaN,NA,120
br09h,con_sqrt,NaN,NA,120
br09h,con_pc,NaN,NA,120
br09h,con_oecdm,NaN,NA,120
br09h,con_ae,NaN,NA,120
[1] "Loading dataset br11h..."
br11h,market_hh,0.597,0.0017,120
br11h,market_sqrt,0.5724,0.0017,120
br11h,market_pc,0.5966,0.0019,120
br11h,market_oecdm,0.5754,0.0019,120
br11h,market_ae,0.5827,0.0022,120
br11h,gross_hh,0.5032,0.0017,120
br11h,gross_sqrt,0.4947,0.002,120
br11h,gross_pc,0.5228,0.0017,120
br11h,gross_oecdm,0.4962,0.0017,120
br11h,gross_ae,0.505,0.0018,120
br11h,disp_hh,0.4774,0.0015,120
br11h,disp_sqrt,0.4692,0.0018,120
br11h,disp_pc,0.499,0.0016,120
br11h,disp_oecdm,0.4705,0.0018,120
br11h,disp_ae,0.4799,0.0017,120
br11h,con_hh,NaN,NA,120
br11h,con_sqrt,NaN,NA,120
br11h,con_pc,NaN,NA,120
br11h,con_oecdm,NaN,NA,120
br11h,con_ae,NaN,NA,120
[1] "Loading dataset br13h..."
br13h,market_hh,0.5969,0.0018,120
br13h,market_sqrt,0.5694,0.0019,120
br13h,market_pc,0.5932,0.0018,120
br13h,market_oecdm,0.5727,0.0018,120
br13h,market_ae,0.5797,0.0019,120
br13h,gross_hh,0.4957,0.0017,120
br13h,gross_sqrt,0.485,0.0019,120
br13h,gross_pc,0.5131,0.0019,120
br13h,gross_oecdm,0.4869,0.0016,120
br13h,gross_ae,0.4955,0.0018,120
br13h,disp_hh,0.4704,0.0015,120
br13h,disp_sqrt,0.4601,0.0018,120
br13h,disp_pc,0.4899,0.0017,120
br13h,disp_oecdm,0.4617,0.0016,120
br13h,disp_ae,0.4709,0.0014,120
br13h,con_hh,NaN,NA,120
br13h,con_sqrt,NaN,NA,120
br13h,con_pc,NaN,NA,120
br13h,con_oecdm,NaN,NA,120
br13h,con_ae,NaN,NA,120
[1] "Loading dataset br16h..."
br16h,market_hh,0.595,0.0021,120
br16h,market_sqrt,0.5768,0.0021,120
br16h,market_pc,0.5991,0.0021,120
br16h,market_oecdm,0.5805,0.0023,120
br16h,market_ae,0.5868,0.0021,120
br16h,gross_hh,0.4932,0.002,120
br16h,gross_sqrt,0.4886,0.002,120
br16h,gross_pc,0.515,0.002,120
br16h,gross_oecdm,0.4909,0.0023,120
br16h,gross_ae,0.4988,0.0023,120
br16h,disp_hh,0.4682,0.0017,120
br16h,disp_sqrt,0.4641,0.002,120
br16h,disp_pc,0.4925,0.0017,120
br16h,disp_oecdm,0.4662,0.002,120
br16h,disp_ae,0.4748,0.0019,120
br16h,con_hh,NaN,NA,120
br16h,con_sqrt,NaN,NA,120
br16h,con_pc,NaN,NA,120
br16h,con_oecdm,NaN,NA,120
br16h,con_ae,NaN,NA,120
[1] "Loading dataset br17h..."
br17h,market_hh,0.61,0.0024,120
br17h,market_sqrt,0.5911,0.0026,120
br17h,market_pc,0.613,0.0025,120
br17h,market_oecdm,0.5957,0.003,120
br17h,market_ae,0.6017,0.0023,120
br17h,gross_hh,0.508,0.0026,120
br17h,gross_sqrt,0.5026,0.0024,120
br17h,gross_pc,0.5286,0.0024,120
br17h,gross_oecdm,0.5059,0.0031,120
br17h,gross_ae,0.5134,0.0025,120
br17h,disp_hh,0.4812,0.0024,120
br17h,disp_sqrt,0.4763,0.0024,120
br17h,disp_pc,0.5043,0.0022,120
br17h,disp_oecdm,0.4794,0.0025,120
br17h,disp_ae,0.4876,0.0023,120
br17h,con_hh,NaN,NA,120
br17h,con_sqrt,NaN,NA,120
br17h,con_pc,NaN,NA,120
br17h,con_oecdm,NaN,NA,120
br17h,con_ae,NaN,NA,120
[1] "Loading dataset br18h..."
br18h,market_hh,0.613,0.0023,120
br18h,market_sqrt,0.593,0.0024,120
br18h,market_pc,0.6141,0.0021,120
br18h,market_oecdm,0.5972,0.0021,120
br18h,market_ae,0.603,0.0022,120
br18h,gross_hh,0.5097,0.0022,120
br18h,gross_sqrt,0.5036,0.0024,120
br18h,gross_pc,0.5288,0.0021,120
br18h,gross_oecdm,0.5067,0.0026,120
br18h,gross_ae,0.514,0.0022,120
br18h,disp_hh,0.4819,0.0022,120
br18h,disp_sqrt,0.4764,0.0019,120
br18h,disp_pc,0.5035,0.0018,120
br18h,disp_oecdm,0.4792,0.0021,120
br18h,disp_ae,0.4872,0.0021,120
br18h,con_hh,NaN,NA,120
br18h,con_sqrt,NaN,NA,120
br18h,con_pc,NaN,NA,120
br18h,con_oecdm,NaN,NA,120
br18h,con_ae,NaN,NA,120
[1] "Loading dataset br19h..."
br19h,market_hh,0.6122,0.0025,120
br19h,market_sqrt,0.5927,0.0022,120
br19h,market_pc,0.6133,0.0022,120
br19h,market_oecdm,0.5969,0.0026,120
br19h,market_ae,0.6025,0.0024,120
br19h,gross_hh,0.5114,0.0021,120
br19h,gross_sqrt,0.5056,0.0023,120
br19h,gross_pc,0.5302,0.0022,120
br19h,gross_oecdm,0.5086,0.0026,120
br19h,gross_ae,0.5157,0.0023,120
br19h,disp_hh,0.4835,0.0019,120
br19h,disp_sqrt,0.4781,0.0021,120
br19h,disp_pc,0.5049,0.002,120
br19h,disp_oecdm,0.4809,0.0026,120
br19h,disp_ae,0.4888,0.0022,120
br19h,con_hh,NaN,NA,120
br19h,con_sqrt,NaN,NA,120
br19h,con_pc,NaN,NA,120
br19h,con_oecdm,NaN,NA,120
br19h,con_ae,NaN,NA,120
[1] "Loading dataset br20h..."
br20h,market_hh,0.6355,0.002,120
br20h,market_sqrt,0.6156,0.0025,120
br20h,market_pc,0.6352,0.0023,120
br20h,market_oecdm,0.6206,0.0025,120
br20h,market_ae,0.6257,0.0025,120
br20h,gross_hh,0.4909,0.0023,120
br20h,gross_sqrt,0.4806,0.0026,120
br20h,gross_pc,0.5063,0.0024,120
br20h,gross_oecdm,0.4843,0.0025,120
br20h,gross_ae,0.4915,0.0023,120
br20h,disp_hh,0.4604,0.002,120
br20h,disp_sqrt,0.4502,0.0024,120
br20h,disp_pc,0.4781,0.002,120
br20h,disp_oecdm,0.4536,0.0026,120
br20h,disp_ae,0.4616,0.0023,120
br20h,con_hh,NaN,NA,120
br20h,con_sqrt,NaN,NA,120
br20h,con_pc,NaN,NA,120
br20h,con_oecdm,NaN,NA,120
br20h,con_ae,NaN,NA,120
[1] "Loading dataset br21h..."
br21h,market_hh,0.629,0.0025,120
br21h,market_sqrt,0.6095,0.0025,120
br21h,market_pc,0.6308,0.0025,120
br21h,market_oecdm,0.614,0.0028,120
br21h,market_ae,0.6198,0.0023,120
br21h,gross_hh,0.5083,0.0025,120
br21h,gross_sqrt,0.5021,0.0025,120
br21h,gross_pc,0.5271,0.0026,120
br21h,gross_oecdm,0.5051,0.0018,120
br21h,gross_ae,0.5123,0.0026,120
br21h,disp_hh,0.4778,0.0021,120
br21h,disp_sqrt,0.472,0.0025,120
br21h,disp_pc,0.4992,0.0023,120
br21h,disp_oecdm,0.4747,0.0023,120
br21h,disp_ae,0.4828,0.0022,120
br21h,con_hh,NaN,NA,120
br21h,con_sqrt,NaN,NA,120
br21h,con_pc,NaN,NA,120
br21h,con_oecdm,NaN,NA,120
br21h,con_ae,NaN,NA,120
[1] "Loading dataset br22h..."
br22h,market_hh,0.6109,0.0019,120
br22h,market_sqrt,0.5868,0.002,120
br22h,market_pc,0.6088,0.0018,120
br22h,market_oecdm,0.5909,0.0023,120
br22h,market_ae,0.5971,0.0021,120
br22h,gross_hh,0.494,0.0018,120
br22h,gross_sqrt,0.4837,0.0019,120
br22h,gross_pc,0.5084,0.002,120
br22h,gross_oecdm,0.4859,0.0021,120
br22h,gross_ae,0.4931,0.0021,120
br22h,disp_hh,0.4634,0.0018,120
br22h,disp_sqrt,0.4533,0.0018,120
br22h,disp_pc,0.4802,0.0017,120
br22h,disp_oecdm,0.4552,0.0018,120
br22h,disp_ae,0.4632,0.0017,120
br22h,con_hh,NaN,NA,120
br22h,con_sqrt,NaN,NA,120
br22h,con_pc,NaN,NA,120
br22h,con_oecdm,NaN,NA,120
br22h,con_ae,NaN,NA,120
> 
> proc.time()
    user   system  elapsed 
1346.196   12.248 1508.090 


